{"version":3,"sources":["components/Search.js","api/unsplash.js","components/ImageCard.js","components/ImageList.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBox","state","term","onFormSubmit","event","preventDefault","props","search","className","onSubmit","this","action","htmlFor","value","placeholder","onChange","e","setState","target","type","Component","axios","create","baseURL","headers","Authorization","ImageCard","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","React","createRef","addEventListener","photo","description","urls","style","gridRowEnd","ref","alt","src","regular","ImageList","images","photos","map","key","id","App","onSearch","unsplash","get","params","query","per_page","then","res","response","data","results","console","log","catch","err","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gRAwCeA,G,kNApCXC,MAAQ,CACJC,KAAM,I,EAGVC,aAAe,SAACC,GACZA,EAAMC,iBACN,EAAKC,MAAMC,OAAO,EAAKN,MAAMC,O,uDAGvB,IAAD,OACL,OACI,oCACI,yBAAKM,UAAU,cACX,0BACCC,SAAUC,KAAKP,aACfQ,OAAO,GACPH,UAAU,WACP,yBAAKA,UAAU,SACX,2BAAOI,QAAQ,IAAf,wBACA,yBAAKJ,UAAU,YACX,2BACIK,MAAOH,KAAKT,MAAMC,KAClBY,YAAY,WACZC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACf,KAAMc,EAAEE,OAAOL,SAC/CM,KAAK,SACT,6BACA,sC,GA5BRC,c,QCATC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cAAe,2DCsCRC,G,wDAvCX,WAAYpB,GAAQ,IAAD,8BACf,cAAMA,IAaVqB,SAAW,WACP,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAE/BC,EAAQC,KAAKC,KAAKN,EAAS,IAEjC,EAAKX,SAAS,CAAEe,WAhBhB,EAAK/B,MAAQ,CACT+B,MAAO,GAGX,EAAKH,SAAWM,IAAMC,YAPP,E,gEAWf1B,KAAKmB,SAASC,QAAQO,iBAAiB,OAAQ3B,KAAKiB,Y,+BAW9C,IAAD,EACyBjB,KAAKJ,MAAMgC,MAAjCC,EADH,EACGA,YAAaC,EADhB,EACgBA,KAErB,OACI,yBACAC,MAAO,CAACC,WAAW,QAAD,OAAUhC,KAAKT,MAAM+B,SAEnC,yBACIW,IAAKjC,KAAKmB,SACVe,IAAKL,EACLM,IAAKL,EAAKM,e,GAlCNX,IAAMf,YCaf2B,EAXG,SAACzC,GAEf,IAAM0C,EAAS1C,EAAM2C,OAAOC,KAAI,SAACZ,GAC7B,OAAO,kBAAC,EAAD,CAAWa,IAAKb,EAAMc,GAAId,MAAOA,OAG5C,OACI,yBAAK9B,UAAU,cAAcwC,ICkCtBK,E,4MApCbpD,MAAQ,CACNgD,OAAQ,I,EAGVK,SAAW,SAACpD,GACVqD,EAASC,IAAI,iBAAkB,CAC7BC,OAAQ,CACNC,MAAOxD,EACPyD,SAAU,MAGXC,MAAK,SAACC,GACL,IAAIC,EAAWD,EAAIE,KAAKC,QACxBC,QAAQC,IAAIJ,GACZ,EAAK7C,SAAS,CACZgC,OAAQa,OAGXK,OAAM,SAACC,GAAD,OAASH,QAAQC,IAAIE,O,uDAK9B,OACE,yBAAK5D,UAAU,gBACb,kBAAC6D,EAAD,CACE9D,OAAQG,KAAK4C,WAEf,kBAAC,EAAD,CACEL,OAAQvC,KAAKT,MAAMgD,c,GA/BX7B,aCKEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.0743ab0a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass SearchBox extends Component {\n\n    state = {\n        term: ''\n    }\n\n    onFormSubmit = (event) => {\n        event.preventDefault(); \n        this.props.search(this.state.term)\n    }\n\n    render() {\n        return (\n            <>\n                <div className=\"ui segment\">\n                    <form\n                     onSubmit={this.onFormSubmit}\n                     action=\"\" \n                     className=\"ui form\">\n                        <div className=\"field\">\n                            <label htmlFor=\"\">Search for Dope Pics</label>\n                            <div className=\"ui input\">\n                                <input\n                                    value={this.state.term}\n                                    placeholder=\"Lambo...\"\n                                    onChange={(e) => this.setState({term: e.target.value})}\n                                    type=\"text\" />\n                                <br />\n                                <br />\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default SearchBox","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n        Authorization: 'Client-ID F7U7vvPTUka3TqO1Ps8jSMW00XALRsI8O_Wwvq8XTDo',\n      }\n})","import React from 'react';\n\nclass ImageCard extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            spans: 0\n        }\n\n        this.imageRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.imageRef.current.addEventListener('load', this.setSpans);\n    }\n\n    setSpans = () => {\n        const height = this.imageRef.current.clientHeight;\n\n        const spans = Math.ceil(height / 10) ;\n\n        this.setState({ spans })\n    }\n    \n    render() {\n        const { description, urls } = this.props.photo;\n\n        return (\n            <div\n            style={{gridRowEnd: `span ${this.state.spans}`}}\n            >\n                <img\n                    ref={this.imageRef}\n                    alt={description}\n                    src={urls.regular}\n                />\n            </div>\n        )\n    }\n}\n\nexport default ImageCard;","import React from 'react';\nimport './ImageList.css'\nimport ImageCard from './ImageCard'\n\nconst ImageList = (props) => {\n\n    const images = props.photos.map((photo) => {\n        return <ImageCard key={photo.id} photo={photo} />\n    })\n\n    return (\n        <div className='image-list'>{images}</div>\n    )\n}\n\nexport default ImageList;","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBox from './Search';\nimport unsplash from '../api/unsplash';\nimport ImageList from './ImageList';\n\n\nclass App extends Component {\n\n  state = {\n    photos: []\n  }\n\n  onSearch = (term) => {\n    unsplash.get('/search/photos', {\n      params: {\n        query: term,\n        per_page: 30\n      },\n    })\n      .then((res) => {\n        let response = res.data.results\n        console.log(response)\n        this.setState({\n          photos: response\n        })\n      })\n      .catch((err) => console.log(err))\n  }\n\n  render() {\n\n    return (\n      <div className=\"ui container\">\n        <SearchBox\n          search={this.onSearch}\n        />\n        <ImageList\n          photos={this.state.photos}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}